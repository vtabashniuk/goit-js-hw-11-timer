{"version":3,"sources":["js/index.js"],"names":["refs","days","document","querySelector","hours","mins","secs","targetDateFromCalendar","startBtn","stopBtn","timerID","startTimer","date","setInterval","timeDiff","Date","now","console","log","getDividedTime","textContent","Math","floor","timeFormating","value","String","padStart","addEventListener","Promise","resolve","valueAsNumber","date1","getTimezoneOffset","clearInterval"],"mappings":";AACA,IAAMA,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,UAC9BE,KAAMH,SAASC,cAAc,SAC7BG,KAAMJ,SAASC,cAAc,SAC7BI,uBAAwBL,SAASC,cAAc,eAC/CK,SAAUN,SAASC,cAAc,uBACjCM,QAASP,SAASC,cAAc,uBAG9BO,EAAU,KAoBd,SAASC,EAAWC,GACXC,OAAAA,YAAY,WACbC,IAAAA,EAAWF,EAAOG,KAAKC,MAC3BC,QAAQC,IAAI,eAAgB,IAAIH,KAAKA,KAAKC,QAC1CC,QAAQC,IAAI,iBAAkB,IAAIH,KAAKH,IAEvCO,EAAeL,GACfd,EAAKC,KAAKmB,YAAcD,EAAeL,GAAUb,KACjDD,EAAKI,MAAMgB,YAAcD,EAAeL,GAAUV,MAClDJ,EAAKK,KAAKe,YAAcD,EAAeL,GAAUT,KACjDL,EAAKM,KAAKc,YAAcD,EAAeL,GAAUR,KAEjDW,QAAQC,IAAIC,EAAeL,KAC1B,KAGL,SAASK,EAAeL,GAUf,MAAA,CAAEb,KATIoB,KAAKC,MAAMR,EAAY,OASrBV,MARDmB,EACZF,KAAKC,MAAOR,EAAY,MAAyB,OAO7BT,KALTkB,EACXF,KAAKC,MAAOR,EAAY,KAAoB,MAIlBR,KAFfiB,EAAcF,KAAKC,MAAOR,EAAY,IAAc,OAKnE,SAASS,EAAcC,GACdC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAjDnC1B,EAAKQ,SAASmB,iBAAiB,QAAS,WACtCV,QAAQC,IAAI,iBACQ,IAAIU,QAAQ,SAACC,GAC/B7B,EAAKO,uBAAuBoB,iBAAiB,SAAU,cACjDf,IAAAA,EAAOZ,EAAKO,uBAAuBuB,cACnCC,EAAQnB,EAA6C,IAArC,IAAIG,KAAKH,GAAMoB,oBACrCH,EAAQE,GACRd,QAAQC,IAAIa,GACZd,QAAQC,IAAI,4BAA6B,IAAIH,KAAKgB,IAClDrB,EAAUC,EAAWoB,OAMzB/B,EAAKS,QAAQkB,iBAAiB,QAAS,WACrCM,cAAcvB","file":"js.e18713f7.js","sourceRoot":"..\\src","sourcesContent":["// const targetDate = new Date(\"August 1, 2021\").getTime();\r\nconst refs = {\r\n  days: document.querySelector(\".days\"),\r\n  hours: document.querySelector(\".hours\"),\r\n  mins: document.querySelector(\".mins\"),\r\n  secs: document.querySelector(\".secs\"),\r\n  targetDateFromCalendar: document.querySelector(\"#date-input\"),\r\n  startBtn: document.querySelector(\"[data-action=start]\"),\r\n  stopBtn: document.querySelector(\"[data-action=stop]\"),\r\n};\r\n\r\nlet timerID = null;\r\nrefs.startBtn.addEventListener(\"click\", () => {\r\n  console.log('click \"START\"');\r\n  const targetDate1 = new Promise((resolve) => {\r\n    refs.targetDateFromCalendar.addEventListener(\"change\", () => {});\r\n      let date = refs.targetDateFromCalendar.valueAsNumber;\r\n      let date1 = date + (new Date(date).getTimezoneOffset() * 60000);\r\n    resolve(date1);\r\n    console.log(date1);\r\n    console.log('Picked date from CALENDAR', new Date(date1));\r\n    timerID = startTimer(date1);\r\n  });\r\n});\r\n\r\n// console.log(targetDate.getTime());\r\n\r\nrefs.stopBtn.addEventListener(\"click\", () => {\r\n  clearInterval(timerID);\r\n});\r\n\r\nfunction startTimer(date) {\r\n  return setInterval(() => {\r\n    let timeDiff = date - Date.now();\r\n    console.log(\"Date NOW >>>\", new Date(Date.now()));\r\n    console.log(\"TARGET Date>>>\", new Date(date));\r\n\r\n    getDividedTime(timeDiff);\r\n    refs.days.textContent = getDividedTime(timeDiff).days;\r\n    refs.hours.textContent = getDividedTime(timeDiff).hours;\r\n    refs.mins.textContent = getDividedTime(timeDiff).mins;\r\n    refs.secs.textContent = getDividedTime(timeDiff).secs;\r\n\r\n    console.log(getDividedTime(timeDiff));\r\n  }, 1000);\r\n}\r\n\r\nfunction getDividedTime(timeDiff) {\r\n  const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));\r\n  const hours = timeFormating(\r\n    Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\r\n  );\r\n  const mins = timeFormating(\r\n    Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60))\r\n  );\r\n  const secs = timeFormating(Math.floor((timeDiff % (1000 * 60)) / 1000));\r\n\r\n  return { days, hours, mins, secs };\r\n}\r\n\r\nfunction timeFormating(value) {\r\n  return String(value).padStart(2, \"0\");\r\n}\r\n"]}